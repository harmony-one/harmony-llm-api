"""initial_migration

Revision ID: 58a9a3aed9f6
Revises: 
Create Date: 2024-12-16 17:51:32.264106

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '58a9a3aed9f6'
down_revision = None
branch_labels = None
depends_on = None

def table_exists(table_name):
    # Get inspector to check table existence
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    return table_name in inspector.get_table_names()

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('collection_errors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('collection_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sign_in_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(length=42), nullable=False),
    sa.Column('nonce', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(length=42), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('user_type', sa.Enum('WALLET', 'API_KEY', name='usertype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address'),
    sa.UniqueConstraint('username')
    )
    op.create_table('tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jti')
    )
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('DEPOSIT', 'WITHDRAWAL', 'API_USAGE', 'REFUND', name='transactiontype'), nullable=False),
    sa.Column('amount', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('tx_hash', sa.String(length=66), nullable=True),
    sa.Column('model_type', sa.Enum('GPT_4', 'GPT_35', 'CLAUDE', 'GEMINI', name='modeltype'), nullable=True),
    sa.Column('tokens_input', sa.Integer(), nullable=True),
    sa.Column('tokens_output', sa.Integer(), nullable=True),
    sa.Column('request_id', sa.String(length=36), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('endpoint', sa.String(length=100), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('transaction_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id'),
    sa.UniqueConstraint('tx_hash')
    )

    # Safely drop old tables if they exist
    if table_exists('token'):
        op.drop_table('token')
    if table_exists('transaction'):
        op.drop_table('transaction')
    if table_exists('app_collection_errors'):
        op.drop_table('app_collection_errors')
    if table_exists('user'):
        op.drop_table('user')
    if table_exists('sign_in_request'):
        op.drop_table('sign_in_request')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sign_in_request',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('nonce', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sign_in_request_pkey'),
    sa.UniqueConstraint('address', name='sign_in_request_address_key')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_type', postgresql.ENUM('WALLET', 'API_KEY', name='usertype'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('address', name='user_address_key'),
    sa.UniqueConstraint('username', name='user_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('app_collection_errors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collection_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='app_collection_errors_pkey')
    )
    op.create_table('transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('DEPOSIT', 'WITHDRAWAL', 'API_USAGE', 'REFUND', name='transactiontype'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('tx_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('model_type', postgresql.ENUM('GPT_4', 'GPT_35', 'CLAUDE', 'GEMINI', name='modeltype'), autoincrement=False, nullable=True),
    sa.Column('tokens_input', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tokens_output', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('endpoint', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='transaction_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transaction_pkey'),
    sa.UniqueConstraint('request_id', name='transaction_request_id_key'),
    sa.UniqueConstraint('tx_hash', name='transaction_tx_hash_key')
    )
    op.create_table('token',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('jti', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='token_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='token_pkey'),
    sa.UniqueConstraint('jti', name='token_jti_key')
    )
    op.drop_table('transactions')
    op.drop_table('tokens')
    op.drop_table('users')
    op.drop_table('sign_in_requests')
    op.drop_table('collection_errors')
    # ### end Alembic commands ###